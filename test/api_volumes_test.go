/*
Machines API

Testing VolumesAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package machines

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/OutboundSpade/FlyMachines"
)

func Test_machines_VolumesAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test VolumesAPIService CreateVolumeSnapshot", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var appName string
		var volumeId string

		httpRes, err := apiClient.VolumesAPI.CreateVolumeSnapshot(context.Background(), appName, volumeId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VolumesAPIService VolumeDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var appName string
		var volumeId string

		resp, httpRes, err := apiClient.VolumesAPI.VolumeDelete(context.Background(), appName, volumeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VolumesAPIService VolumesCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var appName string

		resp, httpRes, err := apiClient.VolumesAPI.VolumesCreate(context.Background(), appName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VolumesAPIService VolumesExtend", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var appName string
		var volumeId string

		resp, httpRes, err := apiClient.VolumesAPI.VolumesExtend(context.Background(), appName, volumeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VolumesAPIService VolumesGetById", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var appName string
		var volumeId string

		resp, httpRes, err := apiClient.VolumesAPI.VolumesGetById(context.Background(), appName, volumeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VolumesAPIService VolumesList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var appName string

		resp, httpRes, err := apiClient.VolumesAPI.VolumesList(context.Background(), appName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VolumesAPIService VolumesListSnapshots", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var appName string
		var volumeId string

		resp, httpRes, err := apiClient.VolumesAPI.VolumesListSnapshots(context.Background(), appName, volumeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VolumesAPIService VolumesUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var appName string
		var volumeId string

		resp, httpRes, err := apiClient.VolumesAPI.VolumesUpdate(context.Background(), appName, volumeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
