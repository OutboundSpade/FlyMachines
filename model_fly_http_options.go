/*
Machines API

This site hosts documentation generated from the Fly.io Machines API OpenAPI specification. Visit our complete [Machines API docs](https://fly.io/docs/machines/api/) for how to get started, more information about each endpoint, parameter descriptions, and examples.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package machines

import (
	"encoding/json"
)

// checks if the FlyHTTPOptions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FlyHTTPOptions{}

// FlyHTTPOptions struct for FlyHTTPOptions
type FlyHTTPOptions struct {
	Compress *bool `json:"compress,omitempty"`
	H2Backend *bool `json:"h2_backend,omitempty"`
	HeadersReadTimeout *int32 `json:"headers_read_timeout,omitempty"`
	IdleTimeout *int32 `json:"idle_timeout,omitempty"`
	Response *FlyHTTPResponseOptions `json:"response,omitempty"`
}

// NewFlyHTTPOptions instantiates a new FlyHTTPOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFlyHTTPOptions() *FlyHTTPOptions {
	this := FlyHTTPOptions{}
	return &this
}

// NewFlyHTTPOptionsWithDefaults instantiates a new FlyHTTPOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFlyHTTPOptionsWithDefaults() *FlyHTTPOptions {
	this := FlyHTTPOptions{}
	return &this
}

// GetCompress returns the Compress field value if set, zero value otherwise.
func (o *FlyHTTPOptions) GetCompress() bool {
	if o == nil || IsNil(o.Compress) {
		var ret bool
		return ret
	}
	return *o.Compress
}

// GetCompressOk returns a tuple with the Compress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlyHTTPOptions) GetCompressOk() (*bool, bool) {
	if o == nil || IsNil(o.Compress) {
		return nil, false
	}
	return o.Compress, true
}

// HasCompress returns a boolean if a field has been set.
func (o *FlyHTTPOptions) HasCompress() bool {
	if o != nil && !IsNil(o.Compress) {
		return true
	}

	return false
}

// SetCompress gets a reference to the given bool and assigns it to the Compress field.
func (o *FlyHTTPOptions) SetCompress(v bool) {
	o.Compress = &v
}

// GetH2Backend returns the H2Backend field value if set, zero value otherwise.
func (o *FlyHTTPOptions) GetH2Backend() bool {
	if o == nil || IsNil(o.H2Backend) {
		var ret bool
		return ret
	}
	return *o.H2Backend
}

// GetH2BackendOk returns a tuple with the H2Backend field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlyHTTPOptions) GetH2BackendOk() (*bool, bool) {
	if o == nil || IsNil(o.H2Backend) {
		return nil, false
	}
	return o.H2Backend, true
}

// HasH2Backend returns a boolean if a field has been set.
func (o *FlyHTTPOptions) HasH2Backend() bool {
	if o != nil && !IsNil(o.H2Backend) {
		return true
	}

	return false
}

// SetH2Backend gets a reference to the given bool and assigns it to the H2Backend field.
func (o *FlyHTTPOptions) SetH2Backend(v bool) {
	o.H2Backend = &v
}

// GetHeadersReadTimeout returns the HeadersReadTimeout field value if set, zero value otherwise.
func (o *FlyHTTPOptions) GetHeadersReadTimeout() int32 {
	if o == nil || IsNil(o.HeadersReadTimeout) {
		var ret int32
		return ret
	}
	return *o.HeadersReadTimeout
}

// GetHeadersReadTimeoutOk returns a tuple with the HeadersReadTimeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlyHTTPOptions) GetHeadersReadTimeoutOk() (*int32, bool) {
	if o == nil || IsNil(o.HeadersReadTimeout) {
		return nil, false
	}
	return o.HeadersReadTimeout, true
}

// HasHeadersReadTimeout returns a boolean if a field has been set.
func (o *FlyHTTPOptions) HasHeadersReadTimeout() bool {
	if o != nil && !IsNil(o.HeadersReadTimeout) {
		return true
	}

	return false
}

// SetHeadersReadTimeout gets a reference to the given int32 and assigns it to the HeadersReadTimeout field.
func (o *FlyHTTPOptions) SetHeadersReadTimeout(v int32) {
	o.HeadersReadTimeout = &v
}

// GetIdleTimeout returns the IdleTimeout field value if set, zero value otherwise.
func (o *FlyHTTPOptions) GetIdleTimeout() int32 {
	if o == nil || IsNil(o.IdleTimeout) {
		var ret int32
		return ret
	}
	return *o.IdleTimeout
}

// GetIdleTimeoutOk returns a tuple with the IdleTimeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlyHTTPOptions) GetIdleTimeoutOk() (*int32, bool) {
	if o == nil || IsNil(o.IdleTimeout) {
		return nil, false
	}
	return o.IdleTimeout, true
}

// HasIdleTimeout returns a boolean if a field has been set.
func (o *FlyHTTPOptions) HasIdleTimeout() bool {
	if o != nil && !IsNil(o.IdleTimeout) {
		return true
	}

	return false
}

// SetIdleTimeout gets a reference to the given int32 and assigns it to the IdleTimeout field.
func (o *FlyHTTPOptions) SetIdleTimeout(v int32) {
	o.IdleTimeout = &v
}

// GetResponse returns the Response field value if set, zero value otherwise.
func (o *FlyHTTPOptions) GetResponse() FlyHTTPResponseOptions {
	if o == nil || IsNil(o.Response) {
		var ret FlyHTTPResponseOptions
		return ret
	}
	return *o.Response
}

// GetResponseOk returns a tuple with the Response field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlyHTTPOptions) GetResponseOk() (*FlyHTTPResponseOptions, bool) {
	if o == nil || IsNil(o.Response) {
		return nil, false
	}
	return o.Response, true
}

// HasResponse returns a boolean if a field has been set.
func (o *FlyHTTPOptions) HasResponse() bool {
	if o != nil && !IsNil(o.Response) {
		return true
	}

	return false
}

// SetResponse gets a reference to the given FlyHTTPResponseOptions and assigns it to the Response field.
func (o *FlyHTTPOptions) SetResponse(v FlyHTTPResponseOptions) {
	o.Response = &v
}

func (o FlyHTTPOptions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FlyHTTPOptions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Compress) {
		toSerialize["compress"] = o.Compress
	}
	if !IsNil(o.H2Backend) {
		toSerialize["h2_backend"] = o.H2Backend
	}
	if !IsNil(o.HeadersReadTimeout) {
		toSerialize["headers_read_timeout"] = o.HeadersReadTimeout
	}
	if !IsNil(o.IdleTimeout) {
		toSerialize["idle_timeout"] = o.IdleTimeout
	}
	if !IsNil(o.Response) {
		toSerialize["response"] = o.Response
	}
	return toSerialize, nil
}

type NullableFlyHTTPOptions struct {
	value *FlyHTTPOptions
	isSet bool
}

func (v NullableFlyHTTPOptions) Get() *FlyHTTPOptions {
	return v.value
}

func (v *NullableFlyHTTPOptions) Set(val *FlyHTTPOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableFlyHTTPOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableFlyHTTPOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFlyHTTPOptions(val *FlyHTTPOptions) *NullableFlyHTTPOptions {
	return &NullableFlyHTTPOptions{value: val, isSet: true}
}

func (v NullableFlyHTTPOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFlyHTTPOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


