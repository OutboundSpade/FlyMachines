/*
Machines API

This site hosts documentation generated from the Fly.io Machines API OpenAPI specification. Visit our complete [Machines API docs](https://fly.io/docs/machines/api/) for how to get started, more information about each endpoint, parameter descriptions, and examples.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package machines

import (
	"encoding/json"
	"fmt"
)

// MainStatusCode the model 'MainStatusCode'
type MainStatusCode string

// List of main.statusCode
const (
	unknown MainStatusCode = "unknown"
	capacityErr MainStatusCode = "insufficient_capacity"
)

// All allowed values of MainStatusCode enum
var AllowedMainStatusCodeEnumValues = []MainStatusCode{
	"unknown",
	"insufficient_capacity",
}

func (v *MainStatusCode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MainStatusCode(value)
	for _, existing := range AllowedMainStatusCodeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MainStatusCode", value)
}

// NewMainStatusCodeFromValue returns a pointer to a valid MainStatusCode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMainStatusCodeFromValue(v string) (*MainStatusCode, error) {
	ev := MainStatusCode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MainStatusCode: valid values are %v", v, AllowedMainStatusCodeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MainStatusCode) IsValid() bool {
	for _, existing := range AllowedMainStatusCodeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to main.statusCode value
func (v MainStatusCode) Ptr() *MainStatusCode {
	return &v
}

type NullableMainStatusCode struct {
	value *MainStatusCode
	isSet bool
}

func (v NullableMainStatusCode) Get() *MainStatusCode {
	return v.value
}

func (v *NullableMainStatusCode) Set(val *MainStatusCode) {
	v.value = val
	v.isSet = true
}

func (v NullableMainStatusCode) IsSet() bool {
	return v.isSet
}

func (v *NullableMainStatusCode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMainStatusCode(val *MainStatusCode) *NullableMainStatusCode {
	return &NullableMainStatusCode{value: val, isSet: true}
}

func (v NullableMainStatusCode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMainStatusCode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

