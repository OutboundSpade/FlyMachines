/*
Machines API

This site hosts documentation generated from the Fly.io Machines API OpenAPI specification. Visit our complete [Machines API docs](https://fly.io/docs/machines/api/) for how to get started, more information about each endpoint, parameter descriptions, and examples.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package machines

import (
	"encoding/json"
)

// checks if the FlyEnvFrom type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FlyEnvFrom{}

// FlyEnvFrom EnvVar defines an environment variable to be populated from a machine field, env_var
type FlyEnvFrom struct {
	// EnvVar is required and is the name of the environment variable that will be set from the secret. It must be a valid environment variable name.
	EnvVar *string `json:"env_var,omitempty"`
	// FieldRef selects a field of the Machine: supports id, version, app_name, private_ip, region, image.
	FieldRef *string `json:"field_ref,omitempty"`
}

// NewFlyEnvFrom instantiates a new FlyEnvFrom object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFlyEnvFrom() *FlyEnvFrom {
	this := FlyEnvFrom{}
	return &this
}

// NewFlyEnvFromWithDefaults instantiates a new FlyEnvFrom object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFlyEnvFromWithDefaults() *FlyEnvFrom {
	this := FlyEnvFrom{}
	return &this
}

// GetEnvVar returns the EnvVar field value if set, zero value otherwise.
func (o *FlyEnvFrom) GetEnvVar() string {
	if o == nil || IsNil(o.EnvVar) {
		var ret string
		return ret
	}
	return *o.EnvVar
}

// GetEnvVarOk returns a tuple with the EnvVar field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlyEnvFrom) GetEnvVarOk() (*string, bool) {
	if o == nil || IsNil(o.EnvVar) {
		return nil, false
	}
	return o.EnvVar, true
}

// HasEnvVar returns a boolean if a field has been set.
func (o *FlyEnvFrom) HasEnvVar() bool {
	if o != nil && !IsNil(o.EnvVar) {
		return true
	}

	return false
}

// SetEnvVar gets a reference to the given string and assigns it to the EnvVar field.
func (o *FlyEnvFrom) SetEnvVar(v string) {
	o.EnvVar = &v
}

// GetFieldRef returns the FieldRef field value if set, zero value otherwise.
func (o *FlyEnvFrom) GetFieldRef() string {
	if o == nil || IsNil(o.FieldRef) {
		var ret string
		return ret
	}
	return *o.FieldRef
}

// GetFieldRefOk returns a tuple with the FieldRef field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlyEnvFrom) GetFieldRefOk() (*string, bool) {
	if o == nil || IsNil(o.FieldRef) {
		return nil, false
	}
	return o.FieldRef, true
}

// HasFieldRef returns a boolean if a field has been set.
func (o *FlyEnvFrom) HasFieldRef() bool {
	if o != nil && !IsNil(o.FieldRef) {
		return true
	}

	return false
}

// SetFieldRef gets a reference to the given string and assigns it to the FieldRef field.
func (o *FlyEnvFrom) SetFieldRef(v string) {
	o.FieldRef = &v
}

func (o FlyEnvFrom) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FlyEnvFrom) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EnvVar) {
		toSerialize["env_var"] = o.EnvVar
	}
	if !IsNil(o.FieldRef) {
		toSerialize["field_ref"] = o.FieldRef
	}
	return toSerialize, nil
}

type NullableFlyEnvFrom struct {
	value *FlyEnvFrom
	isSet bool
}

func (v NullableFlyEnvFrom) Get() *FlyEnvFrom {
	return v.value
}

func (v *NullableFlyEnvFrom) Set(val *FlyEnvFrom) {
	v.value = val
	v.isSet = true
}

func (v NullableFlyEnvFrom) IsSet() bool {
	return v.isSet
}

func (v *NullableFlyEnvFrom) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFlyEnvFrom(val *FlyEnvFrom) *NullableFlyEnvFrom {
	return &NullableFlyEnvFrom{value: val, isSet: true}
}

func (v NullableFlyEnvFrom) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFlyEnvFrom) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


