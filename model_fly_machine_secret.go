/*
Machines API

This site hosts documentation generated from the Fly.io Machines API OpenAPI specification. Visit our complete [Machines API docs](https://fly.io/docs/machines/api/) for how to get started, more information about each endpoint, parameter descriptions, and examples.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package machines

import (
	"encoding/json"
)

// checks if the FlyMachineSecret type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FlyMachineSecret{}

// FlyMachineSecret A Secret needing to be set in the environment of the Machine. env_var is required
type FlyMachineSecret struct {
	// EnvVar is required and is the name of the environment variable that will be set from the secret. It must be a valid environment variable name.
	EnvVar *string `json:"env_var,omitempty"`
	// Name is optional and when provided is used to reference a secret name where the EnvVar is different from what was set as the secret name.
	Name *string `json:"name,omitempty"`
}

// NewFlyMachineSecret instantiates a new FlyMachineSecret object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFlyMachineSecret() *FlyMachineSecret {
	this := FlyMachineSecret{}
	return &this
}

// NewFlyMachineSecretWithDefaults instantiates a new FlyMachineSecret object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFlyMachineSecretWithDefaults() *FlyMachineSecret {
	this := FlyMachineSecret{}
	return &this
}

// GetEnvVar returns the EnvVar field value if set, zero value otherwise.
func (o *FlyMachineSecret) GetEnvVar() string {
	if o == nil || IsNil(o.EnvVar) {
		var ret string
		return ret
	}
	return *o.EnvVar
}

// GetEnvVarOk returns a tuple with the EnvVar field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlyMachineSecret) GetEnvVarOk() (*string, bool) {
	if o == nil || IsNil(o.EnvVar) {
		return nil, false
	}
	return o.EnvVar, true
}

// HasEnvVar returns a boolean if a field has been set.
func (o *FlyMachineSecret) HasEnvVar() bool {
	if o != nil && !IsNil(o.EnvVar) {
		return true
	}

	return false
}

// SetEnvVar gets a reference to the given string and assigns it to the EnvVar field.
func (o *FlyMachineSecret) SetEnvVar(v string) {
	o.EnvVar = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *FlyMachineSecret) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlyMachineSecret) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *FlyMachineSecret) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *FlyMachineSecret) SetName(v string) {
	o.Name = &v
}

func (o FlyMachineSecret) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FlyMachineSecret) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EnvVar) {
		toSerialize["env_var"] = o.EnvVar
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	return toSerialize, nil
}

type NullableFlyMachineSecret struct {
	value *FlyMachineSecret
	isSet bool
}

func (v NullableFlyMachineSecret) Get() *FlyMachineSecret {
	return v.value
}

func (v *NullableFlyMachineSecret) Set(val *FlyMachineSecret) {
	v.value = val
	v.isSet = true
}

func (v NullableFlyMachineSecret) IsSet() bool {
	return v.isSet
}

func (v *NullableFlyMachineSecret) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFlyMachineSecret(val *FlyMachineSecret) *NullableFlyMachineSecret {
	return &NullableFlyMachineSecret{value: val, isSet: true}
}

func (v NullableFlyMachineSecret) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFlyMachineSecret) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


