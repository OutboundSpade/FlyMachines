/*
Machines API

This site hosts documentation generated from the Fly.io Machines API OpenAPI specification. Visit our complete [Machines API docs](https://fly.io/docs/machines/api/) for how to get started, more information about each endpoint, parameter descriptions, and examples.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package machines

import (
	"encoding/json"
)

// checks if the FlyMachineProcess type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FlyMachineProcess{}

// FlyMachineProcess struct for FlyMachineProcess
type FlyMachineProcess struct {
	Cmd []string `json:"cmd,omitempty"`
	Entrypoint []string `json:"entrypoint,omitempty"`
	Env *map[string]string `json:"env,omitempty"`
	// EnvFrom can be provided to set environment variables from machine fields.
	EnvFrom []FlyEnvFrom `json:"env_from,omitempty"`
	Exec []string `json:"exec,omitempty"`
	// IgnoreAppSecrets can be set to true to ignore the secrets for the App the Machine belongs to and only use the secrets provided at the process level. The default/legacy behavior is to use the secrets provided at the App level.
	IgnoreAppSecrets *bool `json:"ignore_app_secrets,omitempty"`
	// Secrets can be provided at the process level to explicitly indicate which secrets should be used for the process. If not provided, the secrets provided at the machine level will be used.
	Secrets []FlyMachineSecret `json:"secrets,omitempty"`
	User *string `json:"user,omitempty"`
}

// NewFlyMachineProcess instantiates a new FlyMachineProcess object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFlyMachineProcess() *FlyMachineProcess {
	this := FlyMachineProcess{}
	return &this
}

// NewFlyMachineProcessWithDefaults instantiates a new FlyMachineProcess object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFlyMachineProcessWithDefaults() *FlyMachineProcess {
	this := FlyMachineProcess{}
	return &this
}

// GetCmd returns the Cmd field value if set, zero value otherwise.
func (o *FlyMachineProcess) GetCmd() []string {
	if o == nil || IsNil(o.Cmd) {
		var ret []string
		return ret
	}
	return o.Cmd
}

// GetCmdOk returns a tuple with the Cmd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlyMachineProcess) GetCmdOk() ([]string, bool) {
	if o == nil || IsNil(o.Cmd) {
		return nil, false
	}
	return o.Cmd, true
}

// HasCmd returns a boolean if a field has been set.
func (o *FlyMachineProcess) HasCmd() bool {
	if o != nil && !IsNil(o.Cmd) {
		return true
	}

	return false
}

// SetCmd gets a reference to the given []string and assigns it to the Cmd field.
func (o *FlyMachineProcess) SetCmd(v []string) {
	o.Cmd = v
}

// GetEntrypoint returns the Entrypoint field value if set, zero value otherwise.
func (o *FlyMachineProcess) GetEntrypoint() []string {
	if o == nil || IsNil(o.Entrypoint) {
		var ret []string
		return ret
	}
	return o.Entrypoint
}

// GetEntrypointOk returns a tuple with the Entrypoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlyMachineProcess) GetEntrypointOk() ([]string, bool) {
	if o == nil || IsNil(o.Entrypoint) {
		return nil, false
	}
	return o.Entrypoint, true
}

// HasEntrypoint returns a boolean if a field has been set.
func (o *FlyMachineProcess) HasEntrypoint() bool {
	if o != nil && !IsNil(o.Entrypoint) {
		return true
	}

	return false
}

// SetEntrypoint gets a reference to the given []string and assigns it to the Entrypoint field.
func (o *FlyMachineProcess) SetEntrypoint(v []string) {
	o.Entrypoint = v
}

// GetEnv returns the Env field value if set, zero value otherwise.
func (o *FlyMachineProcess) GetEnv() map[string]string {
	if o == nil || IsNil(o.Env) {
		var ret map[string]string
		return ret
	}
	return *o.Env
}

// GetEnvOk returns a tuple with the Env field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlyMachineProcess) GetEnvOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Env) {
		return nil, false
	}
	return o.Env, true
}

// HasEnv returns a boolean if a field has been set.
func (o *FlyMachineProcess) HasEnv() bool {
	if o != nil && !IsNil(o.Env) {
		return true
	}

	return false
}

// SetEnv gets a reference to the given map[string]string and assigns it to the Env field.
func (o *FlyMachineProcess) SetEnv(v map[string]string) {
	o.Env = &v
}

// GetEnvFrom returns the EnvFrom field value if set, zero value otherwise.
func (o *FlyMachineProcess) GetEnvFrom() []FlyEnvFrom {
	if o == nil || IsNil(o.EnvFrom) {
		var ret []FlyEnvFrom
		return ret
	}
	return o.EnvFrom
}

// GetEnvFromOk returns a tuple with the EnvFrom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlyMachineProcess) GetEnvFromOk() ([]FlyEnvFrom, bool) {
	if o == nil || IsNil(o.EnvFrom) {
		return nil, false
	}
	return o.EnvFrom, true
}

// HasEnvFrom returns a boolean if a field has been set.
func (o *FlyMachineProcess) HasEnvFrom() bool {
	if o != nil && !IsNil(o.EnvFrom) {
		return true
	}

	return false
}

// SetEnvFrom gets a reference to the given []FlyEnvFrom and assigns it to the EnvFrom field.
func (o *FlyMachineProcess) SetEnvFrom(v []FlyEnvFrom) {
	o.EnvFrom = v
}

// GetExec returns the Exec field value if set, zero value otherwise.
func (o *FlyMachineProcess) GetExec() []string {
	if o == nil || IsNil(o.Exec) {
		var ret []string
		return ret
	}
	return o.Exec
}

// GetExecOk returns a tuple with the Exec field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlyMachineProcess) GetExecOk() ([]string, bool) {
	if o == nil || IsNil(o.Exec) {
		return nil, false
	}
	return o.Exec, true
}

// HasExec returns a boolean if a field has been set.
func (o *FlyMachineProcess) HasExec() bool {
	if o != nil && !IsNil(o.Exec) {
		return true
	}

	return false
}

// SetExec gets a reference to the given []string and assigns it to the Exec field.
func (o *FlyMachineProcess) SetExec(v []string) {
	o.Exec = v
}

// GetIgnoreAppSecrets returns the IgnoreAppSecrets field value if set, zero value otherwise.
func (o *FlyMachineProcess) GetIgnoreAppSecrets() bool {
	if o == nil || IsNil(o.IgnoreAppSecrets) {
		var ret bool
		return ret
	}
	return *o.IgnoreAppSecrets
}

// GetIgnoreAppSecretsOk returns a tuple with the IgnoreAppSecrets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlyMachineProcess) GetIgnoreAppSecretsOk() (*bool, bool) {
	if o == nil || IsNil(o.IgnoreAppSecrets) {
		return nil, false
	}
	return o.IgnoreAppSecrets, true
}

// HasIgnoreAppSecrets returns a boolean if a field has been set.
func (o *FlyMachineProcess) HasIgnoreAppSecrets() bool {
	if o != nil && !IsNil(o.IgnoreAppSecrets) {
		return true
	}

	return false
}

// SetIgnoreAppSecrets gets a reference to the given bool and assigns it to the IgnoreAppSecrets field.
func (o *FlyMachineProcess) SetIgnoreAppSecrets(v bool) {
	o.IgnoreAppSecrets = &v
}

// GetSecrets returns the Secrets field value if set, zero value otherwise.
func (o *FlyMachineProcess) GetSecrets() []FlyMachineSecret {
	if o == nil || IsNil(o.Secrets) {
		var ret []FlyMachineSecret
		return ret
	}
	return o.Secrets
}

// GetSecretsOk returns a tuple with the Secrets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlyMachineProcess) GetSecretsOk() ([]FlyMachineSecret, bool) {
	if o == nil || IsNil(o.Secrets) {
		return nil, false
	}
	return o.Secrets, true
}

// HasSecrets returns a boolean if a field has been set.
func (o *FlyMachineProcess) HasSecrets() bool {
	if o != nil && !IsNil(o.Secrets) {
		return true
	}

	return false
}

// SetSecrets gets a reference to the given []FlyMachineSecret and assigns it to the Secrets field.
func (o *FlyMachineProcess) SetSecrets(v []FlyMachineSecret) {
	o.Secrets = v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *FlyMachineProcess) GetUser() string {
	if o == nil || IsNil(o.User) {
		var ret string
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlyMachineProcess) GetUserOk() (*string, bool) {
	if o == nil || IsNil(o.User) {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *FlyMachineProcess) HasUser() bool {
	if o != nil && !IsNil(o.User) {
		return true
	}

	return false
}

// SetUser gets a reference to the given string and assigns it to the User field.
func (o *FlyMachineProcess) SetUser(v string) {
	o.User = &v
}

func (o FlyMachineProcess) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FlyMachineProcess) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Cmd) {
		toSerialize["cmd"] = o.Cmd
	}
	if !IsNil(o.Entrypoint) {
		toSerialize["entrypoint"] = o.Entrypoint
	}
	if !IsNil(o.Env) {
		toSerialize["env"] = o.Env
	}
	if !IsNil(o.EnvFrom) {
		toSerialize["env_from"] = o.EnvFrom
	}
	if !IsNil(o.Exec) {
		toSerialize["exec"] = o.Exec
	}
	if !IsNil(o.IgnoreAppSecrets) {
		toSerialize["ignore_app_secrets"] = o.IgnoreAppSecrets
	}
	if !IsNil(o.Secrets) {
		toSerialize["secrets"] = o.Secrets
	}
	if !IsNil(o.User) {
		toSerialize["user"] = o.User
	}
	return toSerialize, nil
}

type NullableFlyMachineProcess struct {
	value *FlyMachineProcess
	isSet bool
}

func (v NullableFlyMachineProcess) Get() *FlyMachineProcess {
	return v.value
}

func (v *NullableFlyMachineProcess) Set(val *FlyMachineProcess) {
	v.value = val
	v.isSet = true
}

func (v NullableFlyMachineProcess) IsSet() bool {
	return v.isSet
}

func (v *NullableFlyMachineProcess) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFlyMachineProcess(val *FlyMachineProcess) *NullableFlyMachineProcess {
	return &NullableFlyMachineProcess{value: val, isSet: true}
}

func (v NullableFlyMachineProcess) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFlyMachineProcess) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


