/*
Machines API

This site hosts documentation generated from the Fly.io Machines API OpenAPI specification. Visit our complete [Machines API docs](https://fly.io/docs/machines/api/) for how to get started, more information about each endpoint, parameter descriptions, and examples.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package machines

import (
	"encoding/json"
)

// checks if the FlyDnsForwardRule type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FlyDnsForwardRule{}

// FlyDnsForwardRule struct for FlyDnsForwardRule
type FlyDnsForwardRule struct {
	Addr *string `json:"addr,omitempty"`
	Basename *string `json:"basename,omitempty"`
}

// NewFlyDnsForwardRule instantiates a new FlyDnsForwardRule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFlyDnsForwardRule() *FlyDnsForwardRule {
	this := FlyDnsForwardRule{}
	return &this
}

// NewFlyDnsForwardRuleWithDefaults instantiates a new FlyDnsForwardRule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFlyDnsForwardRuleWithDefaults() *FlyDnsForwardRule {
	this := FlyDnsForwardRule{}
	return &this
}

// GetAddr returns the Addr field value if set, zero value otherwise.
func (o *FlyDnsForwardRule) GetAddr() string {
	if o == nil || IsNil(o.Addr) {
		var ret string
		return ret
	}
	return *o.Addr
}

// GetAddrOk returns a tuple with the Addr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlyDnsForwardRule) GetAddrOk() (*string, bool) {
	if o == nil || IsNil(o.Addr) {
		return nil, false
	}
	return o.Addr, true
}

// HasAddr returns a boolean if a field has been set.
func (o *FlyDnsForwardRule) HasAddr() bool {
	if o != nil && !IsNil(o.Addr) {
		return true
	}

	return false
}

// SetAddr gets a reference to the given string and assigns it to the Addr field.
func (o *FlyDnsForwardRule) SetAddr(v string) {
	o.Addr = &v
}

// GetBasename returns the Basename field value if set, zero value otherwise.
func (o *FlyDnsForwardRule) GetBasename() string {
	if o == nil || IsNil(o.Basename) {
		var ret string
		return ret
	}
	return *o.Basename
}

// GetBasenameOk returns a tuple with the Basename field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlyDnsForwardRule) GetBasenameOk() (*string, bool) {
	if o == nil || IsNil(o.Basename) {
		return nil, false
	}
	return o.Basename, true
}

// HasBasename returns a boolean if a field has been set.
func (o *FlyDnsForwardRule) HasBasename() bool {
	if o != nil && !IsNil(o.Basename) {
		return true
	}

	return false
}

// SetBasename gets a reference to the given string and assigns it to the Basename field.
func (o *FlyDnsForwardRule) SetBasename(v string) {
	o.Basename = &v
}

func (o FlyDnsForwardRule) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FlyDnsForwardRule) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Addr) {
		toSerialize["addr"] = o.Addr
	}
	if !IsNil(o.Basename) {
		toSerialize["basename"] = o.Basename
	}
	return toSerialize, nil
}

type NullableFlyDnsForwardRule struct {
	value *FlyDnsForwardRule
	isSet bool
}

func (v NullableFlyDnsForwardRule) Get() *FlyDnsForwardRule {
	return v.value
}

func (v *NullableFlyDnsForwardRule) Set(val *FlyDnsForwardRule) {
	v.value = val
	v.isSet = true
}

func (v NullableFlyDnsForwardRule) IsSet() bool {
	return v.isSet
}

func (v *NullableFlyDnsForwardRule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFlyDnsForwardRule(val *FlyDnsForwardRule) *NullableFlyDnsForwardRule {
	return &NullableFlyDnsForwardRule{value: val, isSet: true}
}

func (v NullableFlyDnsForwardRule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFlyDnsForwardRule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


