/*
Machines API

This site hosts documentation generated from the Fly.io Machines API OpenAPI specification. Visit our complete [Machines API docs](https://fly.io/docs/machines/api/) for how to get started, more information about each endpoint, parameter descriptions, and examples.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package machines

import (
	"encoding/json"
)

// checks if the FlyMachineConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FlyMachineConfig{}

// FlyMachineConfig struct for FlyMachineConfig
type FlyMachineConfig struct {
	// Optional boolean telling the Machine to destroy itself once itâ€™s complete (default false)
	AutoDestroy *bool `json:"auto_destroy,omitempty"`
	Checks *map[string]FlyMachineCheck `json:"checks,omitempty"`
	// Deprecated: use Service.Autostart instead
	DisableMachineAutostart *bool `json:"disable_machine_autostart,omitempty"`
	Dns *FlyDNSConfig `json:"dns,omitempty"`
	// An object filled with key/value pairs to be set as environment variables
	Env *map[string]string `json:"env,omitempty"`
	Files []FlyFile `json:"files,omitempty"`
	Guest *FlyMachineGuest `json:"guest,omitempty"`
	// The docker image to run
	Image *string `json:"image,omitempty"`
	Init *FlyMachineInit `json:"init,omitempty"`
	Metadata *map[string]string `json:"metadata,omitempty"`
	Metrics *FlyMachineMetrics `json:"metrics,omitempty"`
	Mounts []FlyMachineMount `json:"mounts,omitempty"`
	Processes []FlyMachineProcess `json:"processes,omitempty"`
	Restart *FlyMachineRestart `json:"restart,omitempty"`
	Schedule *string `json:"schedule,omitempty"`
	Services []FlyMachineService `json:"services,omitempty"`
	// Deprecated: use Guest instead
	Size *string `json:"size,omitempty"`
	// Standbys enable a machine to be a standby for another. In the event of a hardware failure, the standby machine will be started.
	Standbys []string `json:"standbys,omitempty"`
	Statics []FlyStatic `json:"statics,omitempty"`
	StopConfig *FlyStopConfig `json:"stop_config,omitempty"`
}

// NewFlyMachineConfig instantiates a new FlyMachineConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFlyMachineConfig() *FlyMachineConfig {
	this := FlyMachineConfig{}
	return &this
}

// NewFlyMachineConfigWithDefaults instantiates a new FlyMachineConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFlyMachineConfigWithDefaults() *FlyMachineConfig {
	this := FlyMachineConfig{}
	return &this
}

// GetAutoDestroy returns the AutoDestroy field value if set, zero value otherwise.
func (o *FlyMachineConfig) GetAutoDestroy() bool {
	if o == nil || IsNil(o.AutoDestroy) {
		var ret bool
		return ret
	}
	return *o.AutoDestroy
}

// GetAutoDestroyOk returns a tuple with the AutoDestroy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlyMachineConfig) GetAutoDestroyOk() (*bool, bool) {
	if o == nil || IsNil(o.AutoDestroy) {
		return nil, false
	}
	return o.AutoDestroy, true
}

// HasAutoDestroy returns a boolean if a field has been set.
func (o *FlyMachineConfig) HasAutoDestroy() bool {
	if o != nil && !IsNil(o.AutoDestroy) {
		return true
	}

	return false
}

// SetAutoDestroy gets a reference to the given bool and assigns it to the AutoDestroy field.
func (o *FlyMachineConfig) SetAutoDestroy(v bool) {
	o.AutoDestroy = &v
}

// GetChecks returns the Checks field value if set, zero value otherwise.
func (o *FlyMachineConfig) GetChecks() map[string]FlyMachineCheck {
	if o == nil || IsNil(o.Checks) {
		var ret map[string]FlyMachineCheck
		return ret
	}
	return *o.Checks
}

// GetChecksOk returns a tuple with the Checks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlyMachineConfig) GetChecksOk() (*map[string]FlyMachineCheck, bool) {
	if o == nil || IsNil(o.Checks) {
		return nil, false
	}
	return o.Checks, true
}

// HasChecks returns a boolean if a field has been set.
func (o *FlyMachineConfig) HasChecks() bool {
	if o != nil && !IsNil(o.Checks) {
		return true
	}

	return false
}

// SetChecks gets a reference to the given map[string]FlyMachineCheck and assigns it to the Checks field.
func (o *FlyMachineConfig) SetChecks(v map[string]FlyMachineCheck) {
	o.Checks = &v
}

// GetDisableMachineAutostart returns the DisableMachineAutostart field value if set, zero value otherwise.
func (o *FlyMachineConfig) GetDisableMachineAutostart() bool {
	if o == nil || IsNil(o.DisableMachineAutostart) {
		var ret bool
		return ret
	}
	return *o.DisableMachineAutostart
}

// GetDisableMachineAutostartOk returns a tuple with the DisableMachineAutostart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlyMachineConfig) GetDisableMachineAutostartOk() (*bool, bool) {
	if o == nil || IsNil(o.DisableMachineAutostart) {
		return nil, false
	}
	return o.DisableMachineAutostart, true
}

// HasDisableMachineAutostart returns a boolean if a field has been set.
func (o *FlyMachineConfig) HasDisableMachineAutostart() bool {
	if o != nil && !IsNil(o.DisableMachineAutostart) {
		return true
	}

	return false
}

// SetDisableMachineAutostart gets a reference to the given bool and assigns it to the DisableMachineAutostart field.
func (o *FlyMachineConfig) SetDisableMachineAutostart(v bool) {
	o.DisableMachineAutostart = &v
}

// GetDns returns the Dns field value if set, zero value otherwise.
func (o *FlyMachineConfig) GetDns() FlyDNSConfig {
	if o == nil || IsNil(o.Dns) {
		var ret FlyDNSConfig
		return ret
	}
	return *o.Dns
}

// GetDnsOk returns a tuple with the Dns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlyMachineConfig) GetDnsOk() (*FlyDNSConfig, bool) {
	if o == nil || IsNil(o.Dns) {
		return nil, false
	}
	return o.Dns, true
}

// HasDns returns a boolean if a field has been set.
func (o *FlyMachineConfig) HasDns() bool {
	if o != nil && !IsNil(o.Dns) {
		return true
	}

	return false
}

// SetDns gets a reference to the given FlyDNSConfig and assigns it to the Dns field.
func (o *FlyMachineConfig) SetDns(v FlyDNSConfig) {
	o.Dns = &v
}

// GetEnv returns the Env field value if set, zero value otherwise.
func (o *FlyMachineConfig) GetEnv() map[string]string {
	if o == nil || IsNil(o.Env) {
		var ret map[string]string
		return ret
	}
	return *o.Env
}

// GetEnvOk returns a tuple with the Env field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlyMachineConfig) GetEnvOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Env) {
		return nil, false
	}
	return o.Env, true
}

// HasEnv returns a boolean if a field has been set.
func (o *FlyMachineConfig) HasEnv() bool {
	if o != nil && !IsNil(o.Env) {
		return true
	}

	return false
}

// SetEnv gets a reference to the given map[string]string and assigns it to the Env field.
func (o *FlyMachineConfig) SetEnv(v map[string]string) {
	o.Env = &v
}

// GetFiles returns the Files field value if set, zero value otherwise.
func (o *FlyMachineConfig) GetFiles() []FlyFile {
	if o == nil || IsNil(o.Files) {
		var ret []FlyFile
		return ret
	}
	return o.Files
}

// GetFilesOk returns a tuple with the Files field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlyMachineConfig) GetFilesOk() ([]FlyFile, bool) {
	if o == nil || IsNil(o.Files) {
		return nil, false
	}
	return o.Files, true
}

// HasFiles returns a boolean if a field has been set.
func (o *FlyMachineConfig) HasFiles() bool {
	if o != nil && !IsNil(o.Files) {
		return true
	}

	return false
}

// SetFiles gets a reference to the given []FlyFile and assigns it to the Files field.
func (o *FlyMachineConfig) SetFiles(v []FlyFile) {
	o.Files = v
}

// GetGuest returns the Guest field value if set, zero value otherwise.
func (o *FlyMachineConfig) GetGuest() FlyMachineGuest {
	if o == nil || IsNil(o.Guest) {
		var ret FlyMachineGuest
		return ret
	}
	return *o.Guest
}

// GetGuestOk returns a tuple with the Guest field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlyMachineConfig) GetGuestOk() (*FlyMachineGuest, bool) {
	if o == nil || IsNil(o.Guest) {
		return nil, false
	}
	return o.Guest, true
}

// HasGuest returns a boolean if a field has been set.
func (o *FlyMachineConfig) HasGuest() bool {
	if o != nil && !IsNil(o.Guest) {
		return true
	}

	return false
}

// SetGuest gets a reference to the given FlyMachineGuest and assigns it to the Guest field.
func (o *FlyMachineConfig) SetGuest(v FlyMachineGuest) {
	o.Guest = &v
}

// GetImage returns the Image field value if set, zero value otherwise.
func (o *FlyMachineConfig) GetImage() string {
	if o == nil || IsNil(o.Image) {
		var ret string
		return ret
	}
	return *o.Image
}

// GetImageOk returns a tuple with the Image field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlyMachineConfig) GetImageOk() (*string, bool) {
	if o == nil || IsNil(o.Image) {
		return nil, false
	}
	return o.Image, true
}

// HasImage returns a boolean if a field has been set.
func (o *FlyMachineConfig) HasImage() bool {
	if o != nil && !IsNil(o.Image) {
		return true
	}

	return false
}

// SetImage gets a reference to the given string and assigns it to the Image field.
func (o *FlyMachineConfig) SetImage(v string) {
	o.Image = &v
}

// GetInit returns the Init field value if set, zero value otherwise.
func (o *FlyMachineConfig) GetInit() FlyMachineInit {
	if o == nil || IsNil(o.Init) {
		var ret FlyMachineInit
		return ret
	}
	return *o.Init
}

// GetInitOk returns a tuple with the Init field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlyMachineConfig) GetInitOk() (*FlyMachineInit, bool) {
	if o == nil || IsNil(o.Init) {
		return nil, false
	}
	return o.Init, true
}

// HasInit returns a boolean if a field has been set.
func (o *FlyMachineConfig) HasInit() bool {
	if o != nil && !IsNil(o.Init) {
		return true
	}

	return false
}

// SetInit gets a reference to the given FlyMachineInit and assigns it to the Init field.
func (o *FlyMachineConfig) SetInit(v FlyMachineInit) {
	o.Init = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *FlyMachineConfig) GetMetadata() map[string]string {
	if o == nil || IsNil(o.Metadata) {
		var ret map[string]string
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlyMachineConfig) GetMetadataOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Metadata) {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *FlyMachineConfig) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given map[string]string and assigns it to the Metadata field.
func (o *FlyMachineConfig) SetMetadata(v map[string]string) {
	o.Metadata = &v
}

// GetMetrics returns the Metrics field value if set, zero value otherwise.
func (o *FlyMachineConfig) GetMetrics() FlyMachineMetrics {
	if o == nil || IsNil(o.Metrics) {
		var ret FlyMachineMetrics
		return ret
	}
	return *o.Metrics
}

// GetMetricsOk returns a tuple with the Metrics field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlyMachineConfig) GetMetricsOk() (*FlyMachineMetrics, bool) {
	if o == nil || IsNil(o.Metrics) {
		return nil, false
	}
	return o.Metrics, true
}

// HasMetrics returns a boolean if a field has been set.
func (o *FlyMachineConfig) HasMetrics() bool {
	if o != nil && !IsNil(o.Metrics) {
		return true
	}

	return false
}

// SetMetrics gets a reference to the given FlyMachineMetrics and assigns it to the Metrics field.
func (o *FlyMachineConfig) SetMetrics(v FlyMachineMetrics) {
	o.Metrics = &v
}

// GetMounts returns the Mounts field value if set, zero value otherwise.
func (o *FlyMachineConfig) GetMounts() []FlyMachineMount {
	if o == nil || IsNil(o.Mounts) {
		var ret []FlyMachineMount
		return ret
	}
	return o.Mounts
}

// GetMountsOk returns a tuple with the Mounts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlyMachineConfig) GetMountsOk() ([]FlyMachineMount, bool) {
	if o == nil || IsNil(o.Mounts) {
		return nil, false
	}
	return o.Mounts, true
}

// HasMounts returns a boolean if a field has been set.
func (o *FlyMachineConfig) HasMounts() bool {
	if o != nil && !IsNil(o.Mounts) {
		return true
	}

	return false
}

// SetMounts gets a reference to the given []FlyMachineMount and assigns it to the Mounts field.
func (o *FlyMachineConfig) SetMounts(v []FlyMachineMount) {
	o.Mounts = v
}

// GetProcesses returns the Processes field value if set, zero value otherwise.
func (o *FlyMachineConfig) GetProcesses() []FlyMachineProcess {
	if o == nil || IsNil(o.Processes) {
		var ret []FlyMachineProcess
		return ret
	}
	return o.Processes
}

// GetProcessesOk returns a tuple with the Processes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlyMachineConfig) GetProcessesOk() ([]FlyMachineProcess, bool) {
	if o == nil || IsNil(o.Processes) {
		return nil, false
	}
	return o.Processes, true
}

// HasProcesses returns a boolean if a field has been set.
func (o *FlyMachineConfig) HasProcesses() bool {
	if o != nil && !IsNil(o.Processes) {
		return true
	}

	return false
}

// SetProcesses gets a reference to the given []FlyMachineProcess and assigns it to the Processes field.
func (o *FlyMachineConfig) SetProcesses(v []FlyMachineProcess) {
	o.Processes = v
}

// GetRestart returns the Restart field value if set, zero value otherwise.
func (o *FlyMachineConfig) GetRestart() FlyMachineRestart {
	if o == nil || IsNil(o.Restart) {
		var ret FlyMachineRestart
		return ret
	}
	return *o.Restart
}

// GetRestartOk returns a tuple with the Restart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlyMachineConfig) GetRestartOk() (*FlyMachineRestart, bool) {
	if o == nil || IsNil(o.Restart) {
		return nil, false
	}
	return o.Restart, true
}

// HasRestart returns a boolean if a field has been set.
func (o *FlyMachineConfig) HasRestart() bool {
	if o != nil && !IsNil(o.Restart) {
		return true
	}

	return false
}

// SetRestart gets a reference to the given FlyMachineRestart and assigns it to the Restart field.
func (o *FlyMachineConfig) SetRestart(v FlyMachineRestart) {
	o.Restart = &v
}

// GetSchedule returns the Schedule field value if set, zero value otherwise.
func (o *FlyMachineConfig) GetSchedule() string {
	if o == nil || IsNil(o.Schedule) {
		var ret string
		return ret
	}
	return *o.Schedule
}

// GetScheduleOk returns a tuple with the Schedule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlyMachineConfig) GetScheduleOk() (*string, bool) {
	if o == nil || IsNil(o.Schedule) {
		return nil, false
	}
	return o.Schedule, true
}

// HasSchedule returns a boolean if a field has been set.
func (o *FlyMachineConfig) HasSchedule() bool {
	if o != nil && !IsNil(o.Schedule) {
		return true
	}

	return false
}

// SetSchedule gets a reference to the given string and assigns it to the Schedule field.
func (o *FlyMachineConfig) SetSchedule(v string) {
	o.Schedule = &v
}

// GetServices returns the Services field value if set, zero value otherwise.
func (o *FlyMachineConfig) GetServices() []FlyMachineService {
	if o == nil || IsNil(o.Services) {
		var ret []FlyMachineService
		return ret
	}
	return o.Services
}

// GetServicesOk returns a tuple with the Services field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlyMachineConfig) GetServicesOk() ([]FlyMachineService, bool) {
	if o == nil || IsNil(o.Services) {
		return nil, false
	}
	return o.Services, true
}

// HasServices returns a boolean if a field has been set.
func (o *FlyMachineConfig) HasServices() bool {
	if o != nil && !IsNil(o.Services) {
		return true
	}

	return false
}

// SetServices gets a reference to the given []FlyMachineService and assigns it to the Services field.
func (o *FlyMachineConfig) SetServices(v []FlyMachineService) {
	o.Services = v
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *FlyMachineConfig) GetSize() string {
	if o == nil || IsNil(o.Size) {
		var ret string
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlyMachineConfig) GetSizeOk() (*string, bool) {
	if o == nil || IsNil(o.Size) {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *FlyMachineConfig) HasSize() bool {
	if o != nil && !IsNil(o.Size) {
		return true
	}

	return false
}

// SetSize gets a reference to the given string and assigns it to the Size field.
func (o *FlyMachineConfig) SetSize(v string) {
	o.Size = &v
}

// GetStandbys returns the Standbys field value if set, zero value otherwise.
func (o *FlyMachineConfig) GetStandbys() []string {
	if o == nil || IsNil(o.Standbys) {
		var ret []string
		return ret
	}
	return o.Standbys
}

// GetStandbysOk returns a tuple with the Standbys field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlyMachineConfig) GetStandbysOk() ([]string, bool) {
	if o == nil || IsNil(o.Standbys) {
		return nil, false
	}
	return o.Standbys, true
}

// HasStandbys returns a boolean if a field has been set.
func (o *FlyMachineConfig) HasStandbys() bool {
	if o != nil && !IsNil(o.Standbys) {
		return true
	}

	return false
}

// SetStandbys gets a reference to the given []string and assigns it to the Standbys field.
func (o *FlyMachineConfig) SetStandbys(v []string) {
	o.Standbys = v
}

// GetStatics returns the Statics field value if set, zero value otherwise.
func (o *FlyMachineConfig) GetStatics() []FlyStatic {
	if o == nil || IsNil(o.Statics) {
		var ret []FlyStatic
		return ret
	}
	return o.Statics
}

// GetStaticsOk returns a tuple with the Statics field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlyMachineConfig) GetStaticsOk() ([]FlyStatic, bool) {
	if o == nil || IsNil(o.Statics) {
		return nil, false
	}
	return o.Statics, true
}

// HasStatics returns a boolean if a field has been set.
func (o *FlyMachineConfig) HasStatics() bool {
	if o != nil && !IsNil(o.Statics) {
		return true
	}

	return false
}

// SetStatics gets a reference to the given []FlyStatic and assigns it to the Statics field.
func (o *FlyMachineConfig) SetStatics(v []FlyStatic) {
	o.Statics = v
}

// GetStopConfig returns the StopConfig field value if set, zero value otherwise.
func (o *FlyMachineConfig) GetStopConfig() FlyStopConfig {
	if o == nil || IsNil(o.StopConfig) {
		var ret FlyStopConfig
		return ret
	}
	return *o.StopConfig
}

// GetStopConfigOk returns a tuple with the StopConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlyMachineConfig) GetStopConfigOk() (*FlyStopConfig, bool) {
	if o == nil || IsNil(o.StopConfig) {
		return nil, false
	}
	return o.StopConfig, true
}

// HasStopConfig returns a boolean if a field has been set.
func (o *FlyMachineConfig) HasStopConfig() bool {
	if o != nil && !IsNil(o.StopConfig) {
		return true
	}

	return false
}

// SetStopConfig gets a reference to the given FlyStopConfig and assigns it to the StopConfig field.
func (o *FlyMachineConfig) SetStopConfig(v FlyStopConfig) {
	o.StopConfig = &v
}

func (o FlyMachineConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FlyMachineConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AutoDestroy) {
		toSerialize["auto_destroy"] = o.AutoDestroy
	}
	if !IsNil(o.Checks) {
		toSerialize["checks"] = o.Checks
	}
	if !IsNil(o.DisableMachineAutostart) {
		toSerialize["disable_machine_autostart"] = o.DisableMachineAutostart
	}
	if !IsNil(o.Dns) {
		toSerialize["dns"] = o.Dns
	}
	if !IsNil(o.Env) {
		toSerialize["env"] = o.Env
	}
	if !IsNil(o.Files) {
		toSerialize["files"] = o.Files
	}
	if !IsNil(o.Guest) {
		toSerialize["guest"] = o.Guest
	}
	if !IsNil(o.Image) {
		toSerialize["image"] = o.Image
	}
	if !IsNil(o.Init) {
		toSerialize["init"] = o.Init
	}
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	if !IsNil(o.Metrics) {
		toSerialize["metrics"] = o.Metrics
	}
	if !IsNil(o.Mounts) {
		toSerialize["mounts"] = o.Mounts
	}
	if !IsNil(o.Processes) {
		toSerialize["processes"] = o.Processes
	}
	if !IsNil(o.Restart) {
		toSerialize["restart"] = o.Restart
	}
	if !IsNil(o.Schedule) {
		toSerialize["schedule"] = o.Schedule
	}
	if !IsNil(o.Services) {
		toSerialize["services"] = o.Services
	}
	if !IsNil(o.Size) {
		toSerialize["size"] = o.Size
	}
	if !IsNil(o.Standbys) {
		toSerialize["standbys"] = o.Standbys
	}
	if !IsNil(o.Statics) {
		toSerialize["statics"] = o.Statics
	}
	if !IsNil(o.StopConfig) {
		toSerialize["stop_config"] = o.StopConfig
	}
	return toSerialize, nil
}

type NullableFlyMachineConfig struct {
	value *FlyMachineConfig
	isSet bool
}

func (v NullableFlyMachineConfig) Get() *FlyMachineConfig {
	return v.value
}

func (v *NullableFlyMachineConfig) Set(val *FlyMachineConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableFlyMachineConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableFlyMachineConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFlyMachineConfig(val *FlyMachineConfig) *NullableFlyMachineConfig {
	return &NullableFlyMachineConfig{value: val, isSet: true}
}

func (v NullableFlyMachineConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFlyMachineConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


