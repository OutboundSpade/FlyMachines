/*
Machines API

This site hosts documentation generated from the Fly.io Machines API OpenAPI specification. Visit our complete [Machines API docs](https://fly.io/docs/machines/api/) for how to get started, more information about each endpoint, parameter descriptions, and examples.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package machines

import (
	"encoding/json"
)

// checks if the FlyFile type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FlyFile{}

// FlyFile A file that will be written to the Machine. One of RawValue or SecretName must be set.
type FlyFile struct {
	// GuestPath is the path on the machine where the file will be written and must be an absolute path. For example: /full/path/to/file.json
	GuestPath *string `json:"guest_path,omitempty"`
	// Mode bits used to set permissions on this file as accepted by chmod(2).
	Mode *int32 `json:"mode,omitempty"`
	// The base64 encoded string of the file contents.
	RawValue *string `json:"raw_value,omitempty"`
	// The name of the secret that contains the base64 encoded file contents.
	SecretName *string `json:"secret_name,omitempty"`
}

// NewFlyFile instantiates a new FlyFile object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFlyFile() *FlyFile {
	this := FlyFile{}
	return &this
}

// NewFlyFileWithDefaults instantiates a new FlyFile object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFlyFileWithDefaults() *FlyFile {
	this := FlyFile{}
	return &this
}

// GetGuestPath returns the GuestPath field value if set, zero value otherwise.
func (o *FlyFile) GetGuestPath() string {
	if o == nil || IsNil(o.GuestPath) {
		var ret string
		return ret
	}
	return *o.GuestPath
}

// GetGuestPathOk returns a tuple with the GuestPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlyFile) GetGuestPathOk() (*string, bool) {
	if o == nil || IsNil(o.GuestPath) {
		return nil, false
	}
	return o.GuestPath, true
}

// HasGuestPath returns a boolean if a field has been set.
func (o *FlyFile) HasGuestPath() bool {
	if o != nil && !IsNil(o.GuestPath) {
		return true
	}

	return false
}

// SetGuestPath gets a reference to the given string and assigns it to the GuestPath field.
func (o *FlyFile) SetGuestPath(v string) {
	o.GuestPath = &v
}

// GetMode returns the Mode field value if set, zero value otherwise.
func (o *FlyFile) GetMode() int32 {
	if o == nil || IsNil(o.Mode) {
		var ret int32
		return ret
	}
	return *o.Mode
}

// GetModeOk returns a tuple with the Mode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlyFile) GetModeOk() (*int32, bool) {
	if o == nil || IsNil(o.Mode) {
		return nil, false
	}
	return o.Mode, true
}

// HasMode returns a boolean if a field has been set.
func (o *FlyFile) HasMode() bool {
	if o != nil && !IsNil(o.Mode) {
		return true
	}

	return false
}

// SetMode gets a reference to the given int32 and assigns it to the Mode field.
func (o *FlyFile) SetMode(v int32) {
	o.Mode = &v
}

// GetRawValue returns the RawValue field value if set, zero value otherwise.
func (o *FlyFile) GetRawValue() string {
	if o == nil || IsNil(o.RawValue) {
		var ret string
		return ret
	}
	return *o.RawValue
}

// GetRawValueOk returns a tuple with the RawValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlyFile) GetRawValueOk() (*string, bool) {
	if o == nil || IsNil(o.RawValue) {
		return nil, false
	}
	return o.RawValue, true
}

// HasRawValue returns a boolean if a field has been set.
func (o *FlyFile) HasRawValue() bool {
	if o != nil && !IsNil(o.RawValue) {
		return true
	}

	return false
}

// SetRawValue gets a reference to the given string and assigns it to the RawValue field.
func (o *FlyFile) SetRawValue(v string) {
	o.RawValue = &v
}

// GetSecretName returns the SecretName field value if set, zero value otherwise.
func (o *FlyFile) GetSecretName() string {
	if o == nil || IsNil(o.SecretName) {
		var ret string
		return ret
	}
	return *o.SecretName
}

// GetSecretNameOk returns a tuple with the SecretName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlyFile) GetSecretNameOk() (*string, bool) {
	if o == nil || IsNil(o.SecretName) {
		return nil, false
	}
	return o.SecretName, true
}

// HasSecretName returns a boolean if a field has been set.
func (o *FlyFile) HasSecretName() bool {
	if o != nil && !IsNil(o.SecretName) {
		return true
	}

	return false
}

// SetSecretName gets a reference to the given string and assigns it to the SecretName field.
func (o *FlyFile) SetSecretName(v string) {
	o.SecretName = &v
}

func (o FlyFile) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FlyFile) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.GuestPath) {
		toSerialize["guest_path"] = o.GuestPath
	}
	if !IsNil(o.Mode) {
		toSerialize["mode"] = o.Mode
	}
	if !IsNil(o.RawValue) {
		toSerialize["raw_value"] = o.RawValue
	}
	if !IsNil(o.SecretName) {
		toSerialize["secret_name"] = o.SecretName
	}
	return toSerialize, nil
}

type NullableFlyFile struct {
	value *FlyFile
	isSet bool
}

func (v NullableFlyFile) Get() *FlyFile {
	return v.value
}

func (v *NullableFlyFile) Set(val *FlyFile) {
	v.value = val
	v.isSet = true
}

func (v NullableFlyFile) IsSet() bool {
	return v.isSet
}

func (v *NullableFlyFile) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFlyFile(val *FlyFile) *NullableFlyFile {
	return &NullableFlyFile{value: val, isSet: true}
}

func (v NullableFlyFile) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFlyFile) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


