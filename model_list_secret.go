/*
Machines API

This site hosts documentation generated from the Fly.io Machines API OpenAPI specification. Visit our complete [Machines API docs](https://fly.io/docs/machines/api/) for how to get started, more information about each endpoint, parameter descriptions, and examples.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package machines

import (
	"encoding/json"
)

// checks if the ListSecret type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListSecret{}

// ListSecret struct for ListSecret
type ListSecret struct {
	Label *string `json:"label,omitempty"`
	Publickey []int32 `json:"publickey,omitempty"`
	Type *string `json:"type,omitempty"`
}

// NewListSecret instantiates a new ListSecret object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListSecret() *ListSecret {
	this := ListSecret{}
	return &this
}

// NewListSecretWithDefaults instantiates a new ListSecret object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListSecretWithDefaults() *ListSecret {
	this := ListSecret{}
	return &this
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *ListSecret) GetLabel() string {
	if o == nil || IsNil(o.Label) {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListSecret) GetLabelOk() (*string, bool) {
	if o == nil || IsNil(o.Label) {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *ListSecret) HasLabel() bool {
	if o != nil && !IsNil(o.Label) {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *ListSecret) SetLabel(v string) {
	o.Label = &v
}

// GetPublickey returns the Publickey field value if set, zero value otherwise.
func (o *ListSecret) GetPublickey() []int32 {
	if o == nil || IsNil(o.Publickey) {
		var ret []int32
		return ret
	}
	return o.Publickey
}

// GetPublickeyOk returns a tuple with the Publickey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListSecret) GetPublickeyOk() ([]int32, bool) {
	if o == nil || IsNil(o.Publickey) {
		return nil, false
	}
	return o.Publickey, true
}

// HasPublickey returns a boolean if a field has been set.
func (o *ListSecret) HasPublickey() bool {
	if o != nil && !IsNil(o.Publickey) {
		return true
	}

	return false
}

// SetPublickey gets a reference to the given []int32 and assigns it to the Publickey field.
func (o *ListSecret) SetPublickey(v []int32) {
	o.Publickey = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ListSecret) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListSecret) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ListSecret) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ListSecret) SetType(v string) {
	o.Type = &v
}

func (o ListSecret) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListSecret) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Label) {
		toSerialize["label"] = o.Label
	}
	if !IsNil(o.Publickey) {
		toSerialize["publickey"] = o.Publickey
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableListSecret struct {
	value *ListSecret
	isSet bool
}

func (v NullableListSecret) Get() *ListSecret {
	return v.value
}

func (v *NullableListSecret) Set(val *ListSecret) {
	v.value = val
	v.isSet = true
}

func (v NullableListSecret) IsSet() bool {
	return v.isSet
}

func (v *NullableListSecret) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListSecret(val *ListSecret) *NullableListSecret {
	return &NullableListSecret{value: val, isSet: true}
}

func (v NullableListSecret) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListSecret) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


