/*
Machines API

This site hosts documentation generated from the Fly.io Machines API OpenAPI specification. Visit our complete [Machines API docs](https://fly.io/docs/machines/api/) for how to get started, more information about each endpoint, parameter descriptions, and examples.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package machines

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the FlyStatic type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FlyStatic{}

// FlyStatic struct for FlyStatic
type FlyStatic struct {
	GuestPath string `json:"guest_path"`
	IndexDocument *string `json:"index_document,omitempty"`
	TigrisBucket *string `json:"tigris_bucket,omitempty"`
	UrlPrefix string `json:"url_prefix"`
}

type _FlyStatic FlyStatic

// NewFlyStatic instantiates a new FlyStatic object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFlyStatic(guestPath string, urlPrefix string) *FlyStatic {
	this := FlyStatic{}
	this.GuestPath = guestPath
	this.UrlPrefix = urlPrefix
	return &this
}

// NewFlyStaticWithDefaults instantiates a new FlyStatic object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFlyStaticWithDefaults() *FlyStatic {
	this := FlyStatic{}
	return &this
}

// GetGuestPath returns the GuestPath field value
func (o *FlyStatic) GetGuestPath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.GuestPath
}

// GetGuestPathOk returns a tuple with the GuestPath field value
// and a boolean to check if the value has been set.
func (o *FlyStatic) GetGuestPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GuestPath, true
}

// SetGuestPath sets field value
func (o *FlyStatic) SetGuestPath(v string) {
	o.GuestPath = v
}

// GetIndexDocument returns the IndexDocument field value if set, zero value otherwise.
func (o *FlyStatic) GetIndexDocument() string {
	if o == nil || IsNil(o.IndexDocument) {
		var ret string
		return ret
	}
	return *o.IndexDocument
}

// GetIndexDocumentOk returns a tuple with the IndexDocument field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlyStatic) GetIndexDocumentOk() (*string, bool) {
	if o == nil || IsNil(o.IndexDocument) {
		return nil, false
	}
	return o.IndexDocument, true
}

// HasIndexDocument returns a boolean if a field has been set.
func (o *FlyStatic) HasIndexDocument() bool {
	if o != nil && !IsNil(o.IndexDocument) {
		return true
	}

	return false
}

// SetIndexDocument gets a reference to the given string and assigns it to the IndexDocument field.
func (o *FlyStatic) SetIndexDocument(v string) {
	o.IndexDocument = &v
}

// GetTigrisBucket returns the TigrisBucket field value if set, zero value otherwise.
func (o *FlyStatic) GetTigrisBucket() string {
	if o == nil || IsNil(o.TigrisBucket) {
		var ret string
		return ret
	}
	return *o.TigrisBucket
}

// GetTigrisBucketOk returns a tuple with the TigrisBucket field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlyStatic) GetTigrisBucketOk() (*string, bool) {
	if o == nil || IsNil(o.TigrisBucket) {
		return nil, false
	}
	return o.TigrisBucket, true
}

// HasTigrisBucket returns a boolean if a field has been set.
func (o *FlyStatic) HasTigrisBucket() bool {
	if o != nil && !IsNil(o.TigrisBucket) {
		return true
	}

	return false
}

// SetTigrisBucket gets a reference to the given string and assigns it to the TigrisBucket field.
func (o *FlyStatic) SetTigrisBucket(v string) {
	o.TigrisBucket = &v
}

// GetUrlPrefix returns the UrlPrefix field value
func (o *FlyStatic) GetUrlPrefix() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UrlPrefix
}

// GetUrlPrefixOk returns a tuple with the UrlPrefix field value
// and a boolean to check if the value has been set.
func (o *FlyStatic) GetUrlPrefixOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UrlPrefix, true
}

// SetUrlPrefix sets field value
func (o *FlyStatic) SetUrlPrefix(v string) {
	o.UrlPrefix = v
}

func (o FlyStatic) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FlyStatic) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["guest_path"] = o.GuestPath
	if !IsNil(o.IndexDocument) {
		toSerialize["index_document"] = o.IndexDocument
	}
	if !IsNil(o.TigrisBucket) {
		toSerialize["tigris_bucket"] = o.TigrisBucket
	}
	toSerialize["url_prefix"] = o.UrlPrefix
	return toSerialize, nil
}

func (o *FlyStatic) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"guest_path",
		"url_prefix",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFlyStatic := _FlyStatic{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFlyStatic)

	if err != nil {
		return err
	}

	*o = FlyStatic(varFlyStatic)

	return err
}

type NullableFlyStatic struct {
	value *FlyStatic
	isSet bool
}

func (v NullableFlyStatic) Get() *FlyStatic {
	return v.value
}

func (v *NullableFlyStatic) Set(val *FlyStatic) {
	v.value = val
	v.isSet = true
}

func (v NullableFlyStatic) IsSet() bool {
	return v.isSet
}

func (v *NullableFlyStatic) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFlyStatic(val *FlyStatic) *NullableFlyStatic {
	return &NullableFlyStatic{value: val, isSet: true}
}

func (v NullableFlyStatic) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFlyStatic) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


