/*
Machines API

This site hosts documentation generated from the Fly.io Machines API OpenAPI specification. Visit our complete [Machines API docs](https://fly.io/docs/machines/api/) for how to get started, more information about each endpoint, parameter descriptions, and examples.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package machines

import (
	"encoding/json"
)

// checks if the MachineVersion type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MachineVersion{}

// MachineVersion struct for MachineVersion
type MachineVersion struct {
	UserConfig *FlyMachineConfig `json:"user_config,omitempty"`
	Version *string `json:"version,omitempty"`
}

// NewMachineVersion instantiates a new MachineVersion object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMachineVersion() *MachineVersion {
	this := MachineVersion{}
	return &this
}

// NewMachineVersionWithDefaults instantiates a new MachineVersion object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMachineVersionWithDefaults() *MachineVersion {
	this := MachineVersion{}
	return &this
}

// GetUserConfig returns the UserConfig field value if set, zero value otherwise.
func (o *MachineVersion) GetUserConfig() FlyMachineConfig {
	if o == nil || IsNil(o.UserConfig) {
		var ret FlyMachineConfig
		return ret
	}
	return *o.UserConfig
}

// GetUserConfigOk returns a tuple with the UserConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MachineVersion) GetUserConfigOk() (*FlyMachineConfig, bool) {
	if o == nil || IsNil(o.UserConfig) {
		return nil, false
	}
	return o.UserConfig, true
}

// HasUserConfig returns a boolean if a field has been set.
func (o *MachineVersion) HasUserConfig() bool {
	if o != nil && !IsNil(o.UserConfig) {
		return true
	}

	return false
}

// SetUserConfig gets a reference to the given FlyMachineConfig and assigns it to the UserConfig field.
func (o *MachineVersion) SetUserConfig(v FlyMachineConfig) {
	o.UserConfig = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *MachineVersion) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MachineVersion) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *MachineVersion) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *MachineVersion) SetVersion(v string) {
	o.Version = &v
}

func (o MachineVersion) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MachineVersion) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.UserConfig) {
		toSerialize["user_config"] = o.UserConfig
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	return toSerialize, nil
}

type NullableMachineVersion struct {
	value *MachineVersion
	isSet bool
}

func (v NullableMachineVersion) Get() *MachineVersion {
	return v.value
}

func (v *NullableMachineVersion) Set(val *MachineVersion) {
	v.value = val
	v.isSet = true
}

func (v NullableMachineVersion) IsSet() bool {
	return v.isSet
}

func (v *NullableMachineVersion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMachineVersion(val *MachineVersion) *NullableMachineVersion {
	return &NullableMachineVersion{value: val, isSet: true}
}

func (v NullableMachineVersion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMachineVersion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


